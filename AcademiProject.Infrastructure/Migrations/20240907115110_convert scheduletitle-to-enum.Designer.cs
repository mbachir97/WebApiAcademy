// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryPaternWithUOW.EF;

#nullable disable

namespace RepositoryPaternWithUOW.EF.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240907115110_convert scheduletitle-to-enum")]
    partial class convertscheduletitletoenum
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Course", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("Varchar");

                    b.Property<int>("HoursToComplete")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(15, 2)
                        .HasColumnType("decimal(15,2)");

                    b.HasKey("Id");

                    b.ToTable("Courses", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CourseName = "Flutter",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 2,
                            CourseName = "CS50",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 4,
                            CourseName = "Microsoft 365",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 5,
                            CourseName = "data Scientist ",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 6,
                            CourseName = "Network Security ",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 7,
                            CourseName = "Artificial Intelligence",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 8,
                            CourseName = "Machine Learning",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 9,
                            CourseName = "Frontend Engineer(Angular)",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 10,
                            CourseName = "Frontend Engineer(React)",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 11,
                            CourseName = "Operating Systems",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 12,
                            CourseName = ".NET Backend Engineer",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 13,
                            CourseName = "Database Administrator",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 14,
                            CourseName = "ASP.NET Full Stack Web Development",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 15,
                            CourseName = "Object Oriented Design & Analysis",
                            HoursToComplete = 50,
                            Price = 3669m
                        },
                        new
                        {
                            Id = 3,
                            CourseName = "tsql",
                            HoursToComplete = 50,
                            Price = 3669m
                        });
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Instructor", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("LName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<int?>("OfficeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OfficeId")
                        .IsUnique()
                        .HasFilter("[OfficeId] IS NOT NULL");

                    b.ToTable("Instructors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FName = "Ahmed",
                            LName = "Abdullah",
                            OfficeId = 1
                        },
                        new
                        {
                            Id = 2,
                            FName = "Yasmeen",
                            LName = "Yasmeen",
                            OfficeId = 2
                        },
                        new
                        {
                            Id = 3,
                            FName = "Khalid",
                            LName = "Hassan",
                            OfficeId = 3
                        },
                        new
                        {
                            Id = 4,
                            FName = "Nadia",
                            LName = "Ali",
                            OfficeId = 4
                        },
                        new
                        {
                            Id = 5,
                            FName = "Ahmed",
                            LName = "Abdullah",
                            OfficeId = 5
                        });
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Office", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("OfficeLocation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.Property<string>("OfficeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.ToTable("Offices", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            OfficeLocation = "building A",
                            OfficeName = "Off_05"
                        },
                        new
                        {
                            Id = 2,
                            OfficeLocation = "building B",
                            OfficeName = "Off_12"
                        },
                        new
                        {
                            Id = 3,
                            OfficeLocation = "Adminstration",
                            OfficeName = "Off_32"
                        },
                        new
                        {
                            Id = 4,
                            OfficeLocation = "IT Department",
                            OfficeName = "Off_44"
                        },
                        new
                        {
                            Id = 5,
                            OfficeLocation = "IT Department",
                            OfficeName = "Off_43"
                        });
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<bool>("FRI")
                        .HasColumnType("bit");

                    b.Property<bool>("MON")
                        .HasColumnType("bit");

                    b.Property<bool>("SAT")
                        .HasColumnType("bit");

                    b.Property<bool>("SUN")
                        .HasColumnType("bit");

                    b.Property<string>("ScheduleType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("THU")
                        .HasColumnType("bit");

                    b.Property<bool>("TUE")
                        .HasColumnType("bit");

                    b.Property<bool>("WED")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Schedules", (string)null);
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Section", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<int>("ScheduleId")
                        .HasColumnType("int");

                    b.Property<string>("SectionName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VARCHAR");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("InstructorId");

                    b.HasIndex("ScheduleId");

                    b.ToTable("Sections", (string)null);
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Instructor", b =>
                {
                    b.HasOne("RepositoryPaternWithUOW.Core.Model.Office", "Office")
                        .WithOne("Instructor")
                        .HasForeignKey("RepositoryPaternWithUOW.Core.Model.Instructor", "OfficeId");

                    b.Navigation("Office");
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Section", b =>
                {
                    b.HasOne("RepositoryPaternWithUOW.Core.Model.Course", "Course")
                        .WithMany("Sections")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RepositoryPaternWithUOW.Core.Model.Instructor", "Instructor")
                        .WithMany("Sections")
                        .HasForeignKey("InstructorId");

                    b.HasOne("RepositoryPaternWithUOW.Core.Model.Schedule", "Schedule")
                        .WithMany("Sections")
                        .HasForeignKey("ScheduleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("RepositoryPaternWithUOW.Core.Model.DateRange", "DateRange", b1 =>
                        {
                            b1.Property<int>("SectionId")
                                .HasColumnType("int");

                            b1.Property<DateTime>("EndDate")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<DateTime>("StartDate")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("SectionId");

                            b1.ToTable("Sections");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");
                        });

                    b.OwnsOne("RepositoryPaternWithUOW.Core.Model.TimeSlot", "TimeSlot", b1 =>
                        {
                            b1.Property<int>("SectionId")
                                .HasColumnType("int");

                            b1.Property<TimeSpan>("EndTime")
                                .HasColumnType("time(0)")
                                .HasColumnName("EndTime");

                            b1.Property<TimeSpan>("StartTime")
                                .HasColumnType("time(0)")
                                .HasColumnName("StartTime");

                            b1.HasKey("SectionId");

                            b1.ToTable("Sections");

                            b1.WithOwner()
                                .HasForeignKey("SectionId");
                        });

                    b.Navigation("Course");

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("Instructor");

                    b.Navigation("Schedule");

                    b.Navigation("TimeSlot")
                        .IsRequired();
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Course", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Instructor", b =>
                {
                    b.Navigation("Sections");
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Office", b =>
                {
                    b.Navigation("Instructor");
                });

            modelBuilder.Entity("RepositoryPaternWithUOW.Core.Model.Schedule", b =>
                {
                    b.Navigation("Sections");
                });
#pragma warning restore 612, 618
        }
    }
}
